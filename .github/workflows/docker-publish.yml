# Nome do Workflow
name: Build and Push OpenEMR Docker Image

# Gatilhos (Triggers) - Quando o workflow deve rodar
on:
  # Roda quando houver um push no branch 'main' ou 'master'
  push:
    branches: [ 'main', 'master' ]
  
  # Roda quando uma nova Release for criada no GitHub
  release:
    types: [ created ]

  # Permite que você rode este workflow manualmente pela aba "Actions"
  workflow_dispatch:

# Variáveis de ambiente para facilitar a personalização
env:
  # TODO: Troque para o seu registro. Ex: ghcr.io
  REGISTRY: docker.io
  # TODO: Troque 'seu-usuario' pelo seu nome de usuário no Docker Hub
  IMAGE_NAME: lucirleisantos/openemr

# Definição dos Jobs (Tarefas)
jobs:
  build-and-push:
    # Rodar em um ambiente Ubuntu mais recente
    runs-on: ubuntu-latest
    
    # Permissões necessárias para o job
    permissions:
      contents: read
      packages: write

    # Passos que o job executará
    steps:
      # 1. Clona o repositório para dentro do ambiente de execução
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Faz o login no registro de contêineres (Docker Hub)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Extrai metadados (tags e labels) da imagem de forma inteligente
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      # 4. Configura o Docker Buildx para builds otimizadas
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5. Constrói a imagem e publica no registro
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # Define o contexto como a raiz do repositório
          context: .
          # Aponta explicitamente para o Dockerfile na raiz do contexto
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
